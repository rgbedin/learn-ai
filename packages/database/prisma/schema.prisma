// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "linux-arm64-openssl-1.0.x", "rhel-openssl-1.0.x"]
}

datasource db {
  provider = "mysql"
  url = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id                            String   @id
  stripeSubscriptionId          String?
  stripeSubscriptionStatus      String?
  stripeSubscriptionPaidUntil   DateTime?
  stripeCustomerId              String?
}

model Coins {
  userId              String   @id
  coins               Int
  lastMonthlyRefill   DateTime?
}

model File {
  uid          String     @id @default(cuid())
  createdAt    DateTime   @default(now())
  userId       String
  key          String
  name         String
  type         String
  size         Int
  numPages     Int?
  text         String?    @db.LongText
  hasProcessed Boolean    @default(false)
  isDigitalContent Boolean?
  summaries    Summary[]
  chats        Chat[]
}

model Chat {
  uid       String   @id @default(cuid())
  createdAt DateTime @default(now())
  file      File     @relation(fields: [fileUid], references: [uid], onDelete: Cascade)
  fileUid   String
  firstQuestion String
  history   ChatHistoryEntry[]

  @@index([fileUid])
}

model ChatHistoryEntry {
  uid       String   @id @default(cuid())
  createdAt DateTime @default(now())
  question  String   @db.MediumText
  answer    String   @db.LongText
  chat      Chat     @relation(fields: [chatUid], references: [uid], onDelete: Cascade)
  chatUid   String

  @@index([chatUid])
}

model Summary {
  uid       String        @id @default(cuid())
  createdAt DateTime      @default(now())
  name      String?       
  text      String?       @db.LongText
  type      SummaryType
  language  String
  pageStart Int?
  pageEnd   Int?
  rating    Int?
  file      File          @relation(fields: [fileUid], references: [uid], onDelete: Cascade)
  fileUid   String
  jobs      SummaryJob[]
  status    SummaryStatus @default(PENDING)
  tokensUsed        Int?
  estimatedPricing  Float?

  @@index([fileUid])
}

model SummaryJob {
  uid               String        @id @default(cuid())
  createdAt         DateTime      @default(now())
  status            SummaryStatus @default(PENDING)
  summary           Summary       @relation(fields: [summaryUid], references: [uid], onDelete: Cascade)
  summaryUid        String
  text              String?        @db.LongText
  index             Int
  tokensUsed        Int?
  estimatedPricing  Float?

  @@index([summaryUid])
}

enum SummaryType {
  SUMMARY
  OUTLINE
  EXPLAIN
}

enum SummaryStatus {
  PENDING
  PROCESSING
  DONE
  ERROR
}

